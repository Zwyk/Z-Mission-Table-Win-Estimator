{
    ["sparkWidth"] = 10,
    ["iconSource"] = -1,
    ["xOffset"] = 160,
    ["preferToUpdate"] = false,
    ["yOffset"] = 20,
    ["displayText_format_p_time_dynamic"] = false,
    ["sparkRotation"] = 0,
    ["url"] = "https://wago.io/hNQkeoP-B/2",
    ["backgroundColor"] = {
        [1] = 0,
        [2] = 0,
        [3] = 0,
        [4] = 0.5,
    },
    ["icon_color"] = {
        [1] = 1,
        [2] = 1,
        [3] = 1,
        [4] = 1,
    },
    ["wordWrap"] = "WordWrap",
    ["barColor"] = {
        [1] = 1,
        [2] = 0,
        [3] = 0,
        [4] = 1,
    },
    ["desc"] = "Estimates the chances to win Adventures from the Command/Mission Table based on board power difference.\\n\\nSupports most of the abilities, will be updated if unsupported ones are found. Please share if you find new ones!\\n\\nPlease note this is solely an estimator, it doesn't factor in placement and precise combat mechanics (attack order, etc.).\\nThis WeakAura's purpose is only to make it easier and faster to estimate if your troops are enough for this combat, not to simulate the whole fight.\\nIt can also be used to determinate how wounded your troops are likely to come back from the mission, based on the estimation.\\nSome examples :\\n   - With 50% win estimated, it's likely the fight will be a close win or loss for either side. If you win, most of your troops will probably be dead or low HP at the end of it.\\n   - With 95% win estimated, your troops are very likely to crush their opponents unmatched.\\n\\nBased on GoldenDrakon and Khanibrawl WeakAuras",
    ["font"] = "1Bignoodle",
    ["sparkOffsetY"] = 0,
    ["load"] = {
        ["use_zone"] = false,
        ["use_zoneId"] = true,
        ["use_never"] = false,
        ["talent"] = {
            ["multi"] = {
            },
        },
        ["zoneId"] = "1698,1707,1699,1701,1565",
        ["spec"] = {
            ["multi"] = {
            },
        },
        ["class"] = {
            ["multi"] = {
            },
        },
        ["size"] = {
            ["multi"] = {
            },
        },
    },
    ["shadowXOffset"] = 1,
    ["smoothProgress"] = true,
    ["useAdjustededMin"] = true,
    ["regionType"] = "aurabar",
    ["texture"] = "Blizzard",
    ["sparkTexture"] = "Interface\\\\CastingBar\\\\UI-CastingBar-Spark",
    ["spark"] = false,
    ["tocversion"] = 90002,
    ["alpha"] = 1,
    ["sparkColor"] = {
        [1] = 1,
        [2] = 1,
        [3] = 1,
        [4] = 1,
    },
    ["fixedWidth"] = 200,
    ["outline"] = "OUTLINE",
    ["sparkOffsetX"] = 0,
    ["color"] = {
        [1] = 1,
        [2] = 1,
        [3] = 1,
        [4] = 1,
    },
    ["adjustedMin"] = "0",
    ["shadowYOffset"] = -1,
    ["sparkRotationMode"] = "AUTO",
    ["automaticWidth"] = "Auto",
    ["triggers"] = {
        [1] = {
            ["trigger"] = {
                ["type"] = "custom",
                ["custom_type"] = "stateupdate",
                ["customVariables"] = "{\\n    percent = \\\"number\\\",\\n    select = \\\"bool\\\",\\n}",
                ["unit"] = "player",
                ["event"] = "Health",
                ["subeventPrefix"] = "SPELL",
                ["spellIds"] = {
                },
                ["customName"] = "\\n\\n",
                ["events"] = "GARRISON_MISSION_NPC_OPENED GARRISON_SHIPYARD_NPC_CLOSED GARRISON_FOLLOWER_LIST_UPDATE GO_FARM_ANIME",
                ["names"] = {
                },
                ["check"] = "event",
                ["custom"] = "function(s, e, ...)\\n    if e == \\\"GARRISON_MISSION_NPC_OPENED\\\"\\n    or e == \\\"GARRISON_SHIPYARD_NPC_CLOSED\\\"\\n    or e == \\\"GARRISON_FOLLOWER_LIST_UPDATE\\\"\\n    then\\n        C_Timer.After(0.1, function() WeakAuras.ScanEvents(\\\"GO_FARM_ANIME\\\", true) end)\\n    elseif e == \\\"GO_FARM_ANIME\\\" and ... then\\n        if CovenantMissionFrame\\n        and CovenantMissionFrame:IsVisible()\\n        and CovenantMissionFrame.MissionTab\\n        and CovenantMissionFrame.MissionTab.MissionPage\\n        and CovenantMissionFrame.MissionTab.MissionPage.Stage\\n        and CovenantMissionFrame.MissionTab.MissionPage.Stage:IsVisible()\\n        and CovenantMissionFrame.MissionTab.MissionPage.Board\\n        and CovenantMissionFrame.MissionTab.MissionPage.Board:IsVisible()\\n        then\\n            local stage = CovenantMissionFrame.MissionTab.MissionPage.Stage\\n            local board = CovenantMissionFrame.MissionTab.MissionPage.Board\\n            local percent = 0\\n            \\n            local aHP = board.AllyHealthValue and board.AllyHealthValue:GetText():gsub(',','') or 0\\n            local aDMG = board.AllyPowerValue and board.AllyPowerValue:GetText():gsub(',','') or 0\\n            \\n            if tonumber(aDMG) > 0 then\\n                local eHP = stage.EnemyHealthValue and stage.EnemyHealthValue:GetText():gsub(',','') or 0\\n                local eDMG = stage.EnemyPowerValue and stage.EnemyPowerValue:GetText():gsub(',','') or 0\\n                \\n                local allies = CovenantMissionFrame.MissionTab.MissionPage.Board.FollowerContainer\\n                local enemies = CovenantMissionFrame.MissionTab.MissionPage.Board.EnemyContainer\\n                \\n                local aMelee, aRanged, eMelee, eRanged = aura_env.nbMeleeRanged(allies, enemies)\\n                \\n                local aBonusHP, aBonusDMG, aHeal, aHealPct, aHPMod, aDMGMod, aDMGTakenMod = aura_env.totPartyBonus(allies, aMelee, aRanged, eMelee, eRanged, aHP, eHP)\\n                local eBonusHP, eBonusDMG, eHeal, eHealPct, eHPMod, eDMGMod, eDMGTakenMod = aura_env.totPartyBonus(enemies, eMelee, eRanged, aMelee, aRanged, eHP, aHP)\\n                \\n                aHP = (aHP + aBonusHP) * aHPMod\\n                aDMG = (aDMG + aBonusDMG) * aDMGMod * eDMGTakenMod\\n                aHeal = aHeal + aHP*aHealPct\\n                \\n                eHP = (eHP + eBonusHP) * eHPMod\\n                eDMG = (eDMG + eBonusDMG) * eDMGMod * aDMGTakenMod\\n                eHeal = eHeal + eHP*eHealPct\\n                \\n                local aDMGEff = aDMG-eHeal\\n                local eDMGEff = eDMG-aHeal\\n                \\n                if aDMGEff < 1 then\\n                    eDMGEff = eDMGEff + (aDMGEff < 0 and (-aDMGEff+1) or (1-aDMGEff))\\n                    aDMGEff = 1\\n                end\\n                if eDMGEff < 1 then\\n                    aDMGEff = aDMGEff + (eDMGEff < 0 and (-eDMGEff+1) or (1-eDMGEff))\\n                    eDMGEff = 1\\n                end\\n                \\n                local aWin = eHP/aDMGEff\\n                local eWin = aHP/eDMGEff\\n                \\n                percent = eWin^2/(eWin^2+aWin^2)\\n                percent = math.floor(percent*100+0.5)\\n            end\\n            \\n            s[\\\"\\\"] = {\\n                percent = percent,\\n                select = tonumber(aDMG) == 0,\\n                progressType = \\\"static\\\",\\n                value = percent,\\n                changed = true,\\n                show = true,\\n            }\\n            return true\\n        elseif s[\\\"\\\"] then\\n            s[\\\"\\\"] = {\\n                changed = true,\\n                show = false,\\n            }\\n            return true\\n        end\\n    end\\nend",
                ["subeventSuffix"] = "_CAST_START",
                ["debuffType"] = "HELPFUL",
            },
            ["untrigger"] = {
                ["custom"] = "",
            },
        },
        ["disjunctive"] = "any",
        ["activeTriggerMode"] = -10,
    },
    ["displayText_format_p_format"] = "timed",
    ["internalVersion"] = 40,
    ["animation"] = {
        ["start"] = {
            ["colorR"] = 1,
            ["scalex"] = 1,
            ["colorA"] = 1,
            ["colorG"] = 1,
            ["type"] = "none",
            ["easeType"] = "none",
            ["colorB"] = 1,
            ["scaley"] = 1,
            ["alpha"] = 0,
            ["colorType"] = "custom",
            ["y"] = 0,
            ["x"] = 0,
            ["easeStrength"] = 3,
            ["duration_type"] = "relative",
            ["colorFunc"] = "function(progress, r1, g1, b1, a1, r2, g2, b2, a2)\\n    return 0, 1, 0\\nend\\n",
            ["rotate"] = 0,
            ["duration"] = "",
            ["use_color"] = true,
        },
        ["main"] = {
            ["colorR"] = 1,
            ["scalex"] = 1,
            ["colorA"] = 1,
            ["colorG"] = 1,
            ["type"] = "custom",
            ["easeType"] = "none",
            ["colorB"] = 1,
            ["scaley"] = 1,
            ["alpha"] = 0,
            ["colorType"] = "custom",
            ["y"] = 0,
            ["x"] = 0,
            ["easeStrength"] = 3,
            ["duration_type"] = "seconds",
            ["colorFunc"] = "function(progress, r1, g1, b1, a1, r2, g2, b2, a2)\\n    if aura_env.state.select or not aura_env.state.percent then\\n        return 0.7, 0.7, 0.7\\n    end\\n    local pct = aura_env.state.percent/100\\n    if pct < 0.5 then\\n        return 1, pct/0.5, 0\\n    else\\n        return (1-pct)/0.5, 1, 0\\n    end\\nend",
            ["rotate"] = 0,
            ["duration"] = "",
            ["use_color"] = true,
        },
        ["finish"] = {
            ["type"] = "none",
            ["easeStrength"] = 3,
            ["duration_type"] = "seconds",
            ["easeType"] = "none",
        },
    },
    ["version"] = 2,
    ["subRegions"] = {
        [1] = {
            ["type"] = "aurabar_bar",
        },
        [2] = {
            ["text_shadowXOffset"] = 0,
            ["text_text"] = "%c",
            ["text_shadowColor"] = {
                [1] = 0,
                [2] = 0,
                [3] = 0,
                [4] = 1,
            },
            ["text_selfPoint"] = "AUTO",
            ["text_automaticWidth"] = "Auto",
            ["text_fixedWidth"] = 64,
            ["anchorYOffset"] = 0,
            ["text_justify"] = "CENTER",
            ["rotateText"] = "NONE",
            ["type"] = "subtext",
            ["text_color"] = {
                [1] = 1,
                [2] = 1,
                [3] = 1,
                [4] = 1,
            },
            ["text_font"] = "Friz Quadrata TT",
            ["text_shadowYOffset"] = 0,
            ["text_wordWrap"] = "WordWrap",
            ["text_fontType"] = "OUTLINE",
            ["text_anchorPoint"] = "INNER_CENTER",
            ["text_text_format_n_format"] = "none",
            ["text_fontSize"] = 15,
            ["anchorXOffset"] = 0,
            ["text_visible"] = true,
        },
        [3] = {
            ["border_offset"] = 1,
            ["border_anchor"] = "bar",
            ["type"] = "subborder",
            ["border_color"] = {
                [1] = 0,
                [2] = 0,
                [3] = 0,
                [4] = 1,
            },
            ["border_visible"] = true,
            ["border_edge"] = "Square Full White",
            ["border_size"] = 1,
        },
    },
    ["height"] = 15,
    ["sparkBlendMode"] = "ADD",
    ["useAdjustededMax"] = true,
    ["fontSize"] = 40,
    ["adjustedMax"] = "100",
    ["customText"] = "function()\\n    if aura_env.state and aura_env.state.percent then\\n        if aura_env.state.select then\\n            return \\\"ADD TROOPS\\\"\\n        end\\n        \\n        return (\\\"WIN: %s%%\\\"):format(aura_env.state.percent)\\n    end\\nend",
    ["uid"] = "9s4pRC((pib",
    ["shadowColor"] = {
        [1] = 0,
        [2] = 0,
        [3] = 0,
        [4] = 1,
    },
    ["anchorFrameFrame"] = "CovenantMissionFrame",
    ["config"] = {
    },
    ["actions"] = {
        ["start"] = {
        },
        ["init"] = {
            ["custom"] = "if not aura_env.region.hook then\\n    aura_env.region.hook = true\\n    local func = function() \\n        C_Timer.After(0.1, function() WeakAuras.ScanEvents(\\\"GO_FARM_ANIME\\\", true) end)\\n    end\\n    \\n    LoadAddOn(\\\"Blizzard_GarrisonUI\\\")\\n    \\n    CovenantMissionFrame.MissionTab.MissionPage.Board:HookScript('OnShow', func)\\n    CovenantMissionFrame.MissionTab.MissionPage.Board:HookScript('OnHide', func)\\nend\\n\\naura_env.nbMeleeRanged = function(allies, enemies)\\n    local aMelee, aRanged, eMelee, eRanged = 0,0,0,0\\n    \\n    for _, frame in ipairs({allies:GetChildren()}) do\\n        if(frame.name) then\\n            if frame.boardIndex > 1 then aMelee = aMelee + 1\\n            else aRanged = aRanged + 1\\n            end\\n        end\\n    end\\n    \\n    for _, frame in ipairs({enemies:GetChildren()}) do\\n        if(frame.name) then\\n            if frame.boardIndex < 9 then eMelee = eMelee + 1\\n            else eRanged = eRanged + 1\\n            end\\n        end\\n    end\\n    \\n    return aMelee, aRanged, eMelee, eRanged\\nend\\n\\naura_env.totPartyBonus = function(container, aMelee, aRanged, eMelee, eRanged, aHP, eHP)\\n    local totHP, totDMG, totHeal, totHealPct, modHP, modDMG, modDMGTaken = 0, 0, 0, 0, 1, 1, 1\\n    for _, frame in ipairs({container:GetChildren()}) do\\n        if frame.name ~= nil then\\n            for _, spell in ipairs(frame:GetAutoCombatSpells()) do\\n                local spellHP, spellDMG, spellHeal, spellHealPct, spellModHP, spellModDMG, spellModDMGTaken = aura_env.abilityEffects(spell.description, spell.cooldown, aMelee, aRanged, eMelee, eRanged, aHP, eHP)\\n                totHP = totHP + spellHP\\n                totDMG = totDMG + spellDMG\\n                totHeal = totHeal + spellHeal\\n                totHealPct = totHealPct + spellHealPct\\n                modHP = modHP * spellModHP\\n                modDMG = modDMG * spellModDMG\\n                modDMGTaken = modDMGTaken * spellModDMGTaken\\n            end\\n        end\\n    end\\n    return totHP, totDMG, totHeal, totHealPct, modHP, modDMG, modDMGTaken\\nend\\n\\naura_env.roundsFromString = function(spellEffect, cooldown)\\n    local round = string.match(string.lower(spellEffect), \\\"for %d+ rounds\\\")\\n    or string.match(string.lower(spellEffect), \\\"for %d+ turns\\\")\\n    round = (round and string.match(round, \\\"%d+\\\"))\\n    or (\\n        (string.match(string.lower(spellEffect), \\\"for one .*\\\") and 1)\\n        or (string.match(string.lower(spellEffect), \\\"for two .*\\\") and 2)\\n        or (string.match(string.lower(spellEffect), \\\"for three .*\\\") and 3)\\n        or (string.match(string.lower(spellEffect), \\\"for four .*\\\") and 4)\\n    or cooldown)\\n    return round\\nend\\n\\naura_env.abilityEffects = function(spellEffect, cooldown, aMelee, aRanged, eMelee, eRanged, aHP, eHP)\\n    local totHP, totDMG, totHeal, totHealPct, modHP, modDMG, modDMGTaken = 0, 0, 0, 0, 1, 1, 1\\n    local aNB = aMelee + aRanged\\n    local eNB = eMelee + eRanged\\n    cooldown = cooldown > 0 and cooldown or 1\\n    local round = aura_env.roundsFromString(spellEffect, cooldown)\\n    \\n    local hp, damage, dot, healing, increase, prot\\n    \\n    spellEffect = string.gsub(spellEffect, \\\"-\\\", \\\"\\\")\\n    \\n    healing = string.match(string.lower(spellEffect), \\\"heal[s]? all .*for %d+%% of their max\\\")\\n    if healing then totHealPct = totHealPct + string.match(healing, \\\"%d+\\\")/100/cooldown\\n    else\\n        healing = string.match(string.lower(spellEffect), \\\"heal[s]? all .*for %d+\\\")\\n        if healing then totHeal = totHeal + (string.match(healing, \\\"%d+\\\"))*aNB/cooldown\\n        else\\n            healing = string.match(string.lower(spellEffect), \\\"each turn.*heals for %d+%% of maximum health\\\")\\n            if healing then totHealPct = totHealPct + (string.match(healing, \\\"%d+\\\"))/100/aNB\\n            else\\n                healing = string.match(string.lower(spellEffect), \\\"healing .*for %d+\\\")\\n                or string.match(string.lower(spellEffect), \\\"heal[s]? .*for %d+\\\")\\n                if healing then totHeal = totHeal + string.match(healing, \\\"%d+\\\")/cooldown end\\n            end\\n        end\\n    end\\n    healing = string.match(string.lower(spellEffect), \\\"and damage taken by %d+ for 2 rounds\\\")\\n    if healing then totHeal = totHeal - string.match(healing, \\\"%d+\\\")*2/cooldown end\\n    \\n    hp = string.match(string.lower(spellEffect), \\\"increases their maximum health by %d+\\\")\\n    if hp then modHP = modHP * (1 + string.match(hp, \\\"%d+\\\")/aNB/100) end\\n    \\n    damage = string.match(string.lower(spellEffect), \\\"dealing %d+ .*damage to all\\\")\\n    if damage then\\n        local nbHit = ((string.match(string.lower(spellEffect), \\\"melee\\\") or string.match(string.lower(spellEffect), \\\"front rank\\\")) and eMelee) or (string.match(string.lower(spellEffect), \\\"ranged\\\") and eRanged) or (string.match(string.lower(spellEffect), \\\"in a line\\\") and math.min(2,eNB)) or eNB\\n        totDMG = totDMG + (string.match(damage, \\\"%d+\\\"))*nbHit/cooldown\\n    else\\n        damage = string.match(string.lower(spellEffect), \\\"deals %d+ .*damage .*each .* for .*\\\")\\n        if damage then  totDMG = totDMG + string.match(spellEffect, \\\"%d+\\\")*round/cooldown\\n        else\\n            damage = string.match(string.lower(spellEffect), \\\"each turn.*deals %d+%% maximum health .*damage to all\\\")\\n            if damage then\\n                damage = string.match(string.lower(spellEffect), \\\"deals %d+%% maximum health\\\")\\n                totDMG = totDMG + (string.match(damage, \\\"%d+\\\"))/100*eHP\\n            else\\n                damage = string.match(string.lower(spellEffect), \\\"dealing %d+ .*damage in a cone\\\")\\n                or string.match(string.lower(spellEffect), \\\"in a cone.*, dealing %d+ .*damage\\\")\\n                if damage then\\n                    local nbHit = 1 + ((eMelee > 0 and eRanged > 0) and math.min(eRanged,2) or 0)\\n                    totDMG = totDMG + (string.match(damage, \\\"%d+\\\"))*nbHit/cooldown\\n                else\\n                    dot = string.match(string.lower(spellEffect), \\\"dealing %d+ .* damage for the next three turns\\\")\\n                    if dot then totDMG = totDMG + (string.match(dot, \\\"%d+\\\"))*3/cooldown\\n                    else\\n                        damage = string.match(string.lower(spellEffect), \\\"all enemies.*, dealing %d+\\\")\\n                        or string.match(string.lower(spellEffect), \\\"all enemies.* for %d+ .*damage\\\")\\n                        if damage then\\n                            local nbHit = ((string.match(string.lower(spellEffect), \\\"melee\\\") or string.match(string.lower(spellEffect), \\\"front rank\\\")) and eMelee) or (string.match(string.lower(spellEffect), \\\"ranged\\\") and eRanged) or eNB\\n                            totDMG = totDMG + (string.match(damage, \\\"%d+\\\"))*nbHit/cooldown\\n                        else\\n                            damage = string.match(string.lower(spellEffect), \\\"adjacent enemies together, dealing %d+ .*damage\\\") \\n                            or string.match(string.lower(spellEffect), \\\"adjacent enemies, dealing %d+ .*damage\\\")\\n                            or string.match(string.lower(spellEffect), \\\"dealing %d+ .*damage to .*adjacent enemies\\\")\\n                            if damage then totDMG = totDMG + (string.match(damage, \\\"%d+\\\"))*(eNB < 3 and eNB or 3)/cooldown\\n                            else\\n                                damage = string.match(string.lower(spellEffect), \\\"dealing %d+ .*damage to both\\\")\\n                                or string.match(string.lower(spellEffect), \\\"dealing %d+ .*damage to them and an enemy behind\\\")\\n                                if damage then totDMG = totDMG + (string.match(damage, \\\"%d+\\\"))*(eNB < 2 and eNB or 2)/cooldown\\n                                else\\n                                    damage = string.match(string.lower(spellEffect), \\\"dealing %d+\\\")\\n                                    or string.match(string.lower(spellEffect), \\\"dealing a %d+\\\")\\n                                    or string.match(string.lower(spellEffect), \\\"deals %d+\\\")\\n                                    if damage then totDMG = totDMG + string.match(damage, \\\"%d+\\\")/cooldown end\\n                                    \\n                                    local doubleStrike = string.match(string.lower(spellEffect), \\\"and then %d+ .*damage\\\")\\n                                    or string.match(string.lower(spellEffect), \\\"and %d+ with the second\\\")\\n                                    if doubleStrike then totDMG = totDMG + string.match(doubleStrike, \\\"%d+\\\")/cooldown end\\n                                    \\n                                    doubleStrike = string.match(string.lower(spellEffect), \\\", then %d+, then %d+, then %d+%.\\\")\\n                                    if doubleStrike then\\n                                        totDMG = totDMG + string.match(doubleStrike, \\\"%d+\\\")/cooldown\\n                                    end\\n                                    doubleStrike = string.match(string.lower(spellEffect), \\\", then %d+, then %d+%.\\\")\\n                                    if doubleStrike then\\n                                        totDMG = totDMG + string.match(doubleStrike, \\\"%d+\\\")/cooldown\\n                                    end\\n                                    doubleStrike = string.match(string.lower(spellEffect), \\\", then %d+%.\\\")\\n                                    if doubleStrike then\\n                                        totDMG = totDMG + string.match(doubleStrike, \\\"%d+\\\")/cooldown\\n                                    end\\n                                end\\n                            end\\n                        end\\n                    end\\n                end\\n            end\\n        end\\n    end\\n    \\n    damage = string.match(string.lower(spellEffect), \\\"hitting them for %d+ .*damage\\\")\\n    if damage then totDMG = totDMG + string.match(damage, \\\"%d+\\\")/cooldown end\\n    \\n    damage = string.match(string.lower(spellEffect), \\\"increasing their damage by %d+ \\\")\\n    if damage then totDMG = totDMG + (string.match(damage, \\\"%d+\\\"))*aNB end\\n    damage = string.match(string.lower(spellEffect), \\\"increases his damage dealt by %d+\\\")\\n    if damage then\\n        totDMG = totDMG + (string.match(damage, \\\"%d+\\\"))*round/cooldown\\n    end\\n    damage = string.match(string.lower(spellEffect), \\\"closest enemy for %d+%% of their maximum hit points\\\")\\n    if damage then totDMG = totDMG + (string.match(damage, \\\"%d+\\\"))/100*eHP/eNB/cooldown end\\n    \\n    dot = string.match(string.lower(spellEffect), \\\"damage over time effect for %d+\\\")\\n    if dot then totDMG = totDMG + string.match(dot, \\\"%d+\\\") end\\n    dot = string.match(string.lower(spellEffect), \\\"additional %d+ .*damage .* round\\\")\\n    or string.match(string.lower(spellEffect), \\\"additional %d+ .*damage .* turn\\\")\\n    or string.match(string.lower(spellEffect), \\\"and %d+ .*damage for .* .*\\\")\\n    or string.match(string.lower(spellEffect), \\\"bleed for %d+ for .*\\\")\\n    if dot then\\n        totDMG = totDMG + string.match(dot, \\\"%d+\\\")*round/cooldown\\n    end\\n    dot = string.match(string.lower(spellEffect), \\\"inflicting %d+ .*damage .* round\\\")\\n    if dot then\\n        local nbHit = ((string.match(string.lower(spellEffect), \\\"melee\\\") or string.match(string.lower(spellEffect), \\\"front rank\\\")) and eMelee) or (string.match(string.lower(spellEffect), \\\"ranged\\\") and eRanged) or eNB\\n        totDMG = totDMG + string.match(dot, \\\"%d+\\\")*nbHit*round/cooldown\\n    end\\n    \\n    prot = string.match(string.lower(spellEffect), \\\"reducing all damage taken by %d+%%\\\")\\n    or string.match(string.lower(spellEffect), \\\"decreasing damage done by %d+%%\\\")\\n    or string.match(string.lower(spellEffect), \\\"reducing the damage .*allies take by %d+%%\\\")\\n    or string.match(string.lower(spellEffect), \\\"all allies take %d+%% less damage\\\")\\n    or string.match(string.lower(spellEffect), \\\"reducing their damage.* by %d+%%\\\")\\n    or string.match(string.lower(spellEffect), \\\"reduces their damage.* by %d+%%\\\")\\n    if prot then\\n        modDMGTaken = modDMGTaken * (1 - string.match(prot, \\\"%d+\\\")*round/cooldown/100)\\n    end\\n    prot = string.match(string.lower(spellEffect), \\\"reducing the damage they take by %d+%%\\\")\\n    if prot then\\n        modDMGTaken = modDMGTaken * (1 - string.match(prot, \\\"%d+\\\")*round/cooldown/aNB/100)\\n    end\\n    prot = string.match(string.lower(spellEffect), \\\"takes %d+%% reduced damage and protects all ranged allies\\\")\\n    if prot then\\n        local nbHit = math.max(1, aRanged)\\n        modDMGTaken = modDMGTaken * (1 - string.match(prot, \\\"%d+\\\")*nbHit/aNB/100)\\n    end\\n    \\n    increase = string.match(string.lower(spellEffect), \\\"increasing the damage they take by %d+%%\\\")\\n    or string.match(string.lower(spellEffect), \\\"buffing their damage by %d+%%\\\")\\n    or string.match(string.lower(spellEffect), \\\"increasing their damage by %d+%%\\\")\\n    if increase then\\n        modDMG = modDMG * (1 + string.match(increase, \\\"%d+\\\")*round/cooldown/100)\\n    end\\n    increase = string.match(string.lower(spellEffect), \\\"increasing damage done by %d+%%\\\")\\n    or string.match(string.lower(spellEffect), \\\"increasing his damage by %d+%%\\\")\\n    if increase then\\n        modDMG = modDMG * (1 + string.match(increase, \\\"%d+\\\")*round/cooldown/aNB/100)\\n    end\\n    increase = string.match(string.lower(spellEffect), \\\"increasing damage taken by %d+%%\\\")\\n    or string.match(string.lower(spellEffect), \\\"causing them to take %d+%% more damage\\\")\\n    if increase then\\n        modDMG = modDMG * (1 + string.match(increase, \\\"%d+\\\")*round/cooldown/eNB/100)\\n    end\\n    increase = string.match(string.lower(spellEffect), \\\"adjacent allies, increasing all damage they deal by %d+%%\\\")\\n    if increase then\\n        local nbHit = math.max(aNB, 2)\\n        modDMG = modDMG * (1 + string.match(increase, \\\"%d+\\\")*nbHit/aNB/100)\\n    end\\n    increase = string.match(string.lower(spellEffect), \\\"but reduce their damage by %d+%% for the next round\\\")\\n    if increase then modDMG = modDMG * (1 - string.match(increase, \\\"%d+\\\")/cooldown/aNB/100) end\\n    increase = string.match(string.lower(spellEffect), \\\"doubles the damage of all allies for %d+ rounds\\\")\\n    if increase then modDMG = modDMG * (1 + (100*string.match(increase, \\\"%d+\\\")/cooldown/100)) end\\n    \\n    return totHP, totDMG, totHeal, totHealPct, modHP, modDMG, modDMGTaken\\nend",
            ["do_custom"] = true,
        },
        ["finish"] = {
        },
    },
    ["desaturate"] = false,
    ["icon_side"] = "RIGHT",
    ["icon"] = false,
    ["width"] = 200,
    ["displayText_format_p_time_precision"] = 1,
    ["customTextUpdate"] = "event",
    ["anchorPoint"] = "BOTTOM",
    ["id"] = "Z Mission Table Win Estimator",
    ["justify"] = "LEFT",
    ["sparkHeight"] = 30,
    ["sparkHidden"] = "NEVER",
    ["semver"] = "1.0.1",
    ["frameStrata"] = 5,
    ["anchorFrameType"] = "SELECTFRAME",
    ["displayText"] = "%c",
    ["selfPoint"] = "BOTTOM",
    ["inverse"] = false,
    ["zoom"] = 0,
    ["orientation"] = "HORIZONTAL",
    ["conditions"] = {
    },
    ["information"] = {
        ["ignoreOptionsEventErrors"] = true,
    },
    ["authorOptions"] = {
    },
}